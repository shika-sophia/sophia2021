//###### javaGoF/chap08AbstractFactory/MainAbstractFactory ######
//2021-06-01
//---- Eclipse カレント・ディレクトリ作成用 ----
String className = System.getProperty("sun.java.command");
String dir = "src/"
    + className.substring(0, className.lastIndexOf("."))
    .replace('.', '/');

System.out.println(dir);
// src/javaGoF/chap08AbstractFactory/abstractFactory

Eclipseの カレント・ディレクトリは、プロジェクト名の位置。
src以下のソースコードにカレントを持っていくための処理。
カレントからの相対パスが利用できるようになる。

自クラスの完全修飾名を取得し、
"src/"を前に付けて、「.クラス名」を除去。
「.」を「/」に置換。

◆Class.forName()
【考察】
Class.forName()のクラスローダーで pathが通らず
ClassNotFoundExceptionが出ている状態。

おぉ、できた。
Eclipseのカレントであるプロジェクト名からの相対パスと考えていたが、
importと同じで、完全修飾クラス名は srcや build/classesは不要で
package名の最初から、つまりいつもの完全修飾名を
Class.forName()の引数に渡せばそれで済む。
//###### AbsFileSystem / 2021-01-25 ######
public void seekProperty() {
        //====== StackTraceの情報を取得 ======
        StackTraceElement[] stackAry
            = Thread.currentThread().getStackTrace();

        for (var stack : stackAry) {
            System.out.println(stack);
        }
        System.out.println();

        //====== Systemプロパティを取得 ======
        Properties property = System.getProperties();

        //---- カレントディレクトリ / クラス名を取得 ----
        System.out.println("user.dir = "
            + property.getProperty("user.dir"));

        System.out.println("sun.java.command = "
            + property.getProperty("sun.java.command"));

//        //---- 全propertyを取得 ----
//        for (Object key : property.keySet()) {
//            System.out.println(key + "=" + property.get(key));
//        }
    }//seekProperty()

/*
//====== StackTraceの情報を取得 ======
java.base/java.lang.Thread.getStackTrace(Thread.java:1606)
utility.ioFileDiv.AbsFileSystem.seekPrevious(AbsFileSystem.java:34)
utility.ioFileDiv.AbsFileSystem.<init>(AbsFileSystem.java:29)
utility.ioFileDiv.ReadFile.<init>(ReadFile.java:16)
utility.ioFileDiv.AbsFileSystem.main(AbsFileSystem.java:48)

//====== Systemプロパティを取得 ======
//---- カレントディレクトリ / クラス名を取得 ----
user.dir = C:\Program Files\pleiades\workspace-web\janJava2021
sun.java.command = utility.ioFileDiv.AbsFileSystem

//---- 全propertyを取得 ----
sun.desktop=windows
awt.toolkit=sun.awt.windows.WToolkit
java.specification.version=11
sun.cpu.isalist=amd64
sun.jnu.encoding=MS932
java.class.path=C:\Program Files\pleiades\workspace-web\janJava2021\build\classes;C:\Program Files\pleiades\tomcat\8\lib\annotations-api.jar;C:\Program Files\pleiades\tomcat\8\lib\catalina-ant.jar;C:\Program Files\pleiades\tomcat\8\lib\catalina-ha.jar;C:\Program Files\pleiades\tomcat\8\lib\catalina-storeconfig.jar;C:\Program Files\pleiades\tomcat\8\lib\catalina-tribes.jar;C:\Program Files\pleiades\tomcat\8\lib\catalina.jar;C:\Program Files\pleiades\tomcat\8\lib\ecj-4.6.3.jar;C:\Program Files\pleiades\tomcat\8\lib\el-api.jar;C:\Program Files\pleiades\tomcat\8\lib\jasper-el.jar;C:\Program Files\pleiades\tomcat\8\lib\jasper.jar;C:\Program Files\pleiades\tomcat\8\lib\jaspic-api.jar;C:\Program Files\pleiades\tomcat\8\lib\jsp-api.jar;C:\Program Files\pleiades\tomcat\8\lib\jstl-api-1.2.jar;C:\Program Files\pleiades\tomcat\8\lib\jstl-impl-1.2.jar;C:\Program Files\pleiades\tomcat\8\lib\mysql-connector-java-8.0.20.jar;C:\Program Files\pleiades\tomcat\8\lib\servlet-api.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-api.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-coyote.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-dbcp.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-de.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-es.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-fr.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-ja.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-ko.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-ru.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-i18n-zh-CN.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-jdbc.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-jni.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-util-scan.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-util.jar;C:\Program Files\pleiades\tomcat\8\lib\tomcat-websocket.jar;C:\Program Files\pleiades\tomcat\8\lib\websocket-api.jar
java.vm.vendor=AdoptOpenJDK
sun.arch.data.model=64
user.variant=
java.vendor.url=https://adoptopenjdk.net/
user.timezone=
os.name=Windows 10
java.vm.specification.version=11
sun.java.launcher=SUN_STANDARD
user.country=JP
sun.boot.library.path=C:\Program Files\pleiades\eclipse\jre\bin
sun.java.command=utility.ioFileDiv.AbsFileSystem
jdk.debug=release
sun.cpu.endian=little
user.home=C:\Users\sophia
user.language=ja
java.specification.vendor=Oracle Corporation
java.version.date=2019-10-15
java.home=C:\Program Files\pleiades\eclipse\jre
file.separator=\
java.vm.compressedOopsMode=Zero based
line.separator=

java.specification.name=Java Platform API Specification
java.vm.specification.vendor=Oracle Corporation
java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment
user.script=
sun.management.compiler=HotSpot 64-Bit Tiered Compilers
java.runtime.version=11.0.5+10
user.name=sophia
path.separator=;
os.version=10.0
java.runtime.name=OpenJDK Runtime Environment
file.encoding=UTF-8
java.vm.name=OpenJDK 64-Bit Server VM
java.vendor.version=AdoptOpenJDK
java.vendor.url.bug=https://github.com/AdoptOpenJDK/openjdk-build/issues
java.io.tmpdir=C:\Users\sophia\AppData\Local\Temp\
java.version=11.0.5
user.dir=C:\Program Files\pleiades\workspace-web\janJava2021
os.arch=amd64
java.vm.specification.name=Java Virtual Machine Specification
java.awt.printerjob=sun.awt.windows.WPrinterJob
sun.os.patch.level=
java.library.path=C:\Program Files\pleiades\eclipse\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/pleiades/eclipse//jre/bin/server;C:/Program Files/pleiades/eclipse//jre/bin;C:\Program Files\AdoptOpenJDK\jdk-11.0.7.10-hotspot\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk1.8.0_251\bin;C:\Program Files\Apache24\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\sophia\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Java\jdk1.8.0_251\bin;C:\Users\sophia\AppData\Local\GitHubDesktop\bin;%USERPROFILE%\AppData\Local\Microsoft\WindowsApps;;C:\Program Files\pleiades\eclipse;;.
java.vendor=AdoptOpenJDK
java.vm.info=mixed mode
java.vm.version=11.0.5+10
sun.io.unicode.encoding=UnicodeLittle
java.class.version=55.0
*/

//###### ReadFile / 2021-01-23 ######
//    public static void main(String[] args) {
//        //このクラスのクラス名を取得
//        String className = new Object(){ }.getClass()
//            .getName().replace('.','\\').replace("$1", ".java");
//
//        //カレントディレクトリを取得
//        String cd = new CmdExecute("").cmdExecutor("@cd");
//
//        //このクラスをインスタンス。絶対パスを渡して実行。
//        var here = new ReadFile();
//        String fileContent = here.readPathFile(cd + "\\src\\" + className);
//
//        //---- Test print ----
//        System.out.println("herePath: " + className);
//        System.out.println(fileContent);
//    }//main()

/*
//======実行結果======
herePath: utility\ReadFile.java

/＊＊
 * @title utility / ReadFile.java
 * @content pathを指定し、そのファイルの読み込み
        :
        :
    }//main()

}//class

【考察】
FileReaderは絶対パスを指定しないと、ファイルを見つけてくれないようです。
〔追記 2021-03-01〕
いや、eclipseの場合 current-directryが プロジェクト名になっているので、
そこからの相対パスなら見つけてくれます。
"src\\multiThread\\chap04MT\\balking\\data.txt"
@see maltiThread / chap04MT / balking / MainBalking.java
*/
/*
//###### javaGold.testExamin.TestJavaDoc / 2021-02-01 ######
TestJavaDoc.main() -> new AnswerEditor() ->
InterAnswerSetting -> new BuildFilePage() の結果

「null
/**
 * @title javaGold / testExamin / TestJavaDoc.java
 * @reference 山本道子『Java Gold SE11 オラクル認定教科書 [1Z0-816]』 翔泳社, 2021
 *            米山 学 『徹底攻略 Java Gold SE8 問題集[1Z0-809]』 インプレス, 2020
 * @content
 * @author shika
 * @date 2021-02-01
 */
null 」 となる問題。

JavaDoc部分は、ちゃんと書けている。
WriteFileで当該ファイルに書き込みされていることから、
filePathも正常に通っているが、

元からあった class, main()の記述が消され、nullとなり、
おそらく ReadFileでの読み込みも null となっていて、この結果と思われ。

InterAnswerSetting（インターフェイス）のフィールドで
new BuildFilePage()をしていることから、
暗黙的に public static finalが付されており、
ioFileDivのインスタンスは static領域にあるのかと疑い、
AnswerEditor内でも new BuildFilePage()をしてみたが、結果は同じ。
(いやインスタンスは ちゃんと heap領域にあるからね)

あっ、 ReadFile.readPathFile(String path)内に、
setReadText(String readText)を入れてなかった。
しっかり読み込んでいたけど、Absのフィールドにセットされてなくて nullだ。

また、nullが 上下に２つある問題は、
WriteFile内で元ファイルのバックアップ目的で readTextを書き込んでいたので、コメントアウト。

修正後、ちゃんとファイルできました。
「/＊＊
 * @title javaGold / testExamin / TestJavaDoc.java
 * @reference 山本道子『Java Gold SE11 オラクル認定教科書 [1Z0-816]』 翔泳社, 2021
 *            米山 学 『徹底攻略 Java Gold SE8 問題集 [1Z0-809]』 インプレス, 2020
 * @content
 * @author shika
 * @date 2021-02-01
 ＊/
package javaGold.testExamin;

import javaGold.AnswerEditor;

public class TestJavaDoc {
    public static void main(String[] args) {
        new AnswerEditor();
        System.out.println("TestJavaDoc終了");
    }//main()
}//class 」

てか、FileWriter.println() って、元のファイルを消して、
そこに上書きしてしまうのね。
