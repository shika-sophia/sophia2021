/**
 * @title javaGold / streamAnalysis.txt
 * @content Stream, Lambda式のコードに関する考察
 *
 *      ---- Streamコードを書いたクラス ----
 * @see utility / interfaceUT / ICalcCorrect
 *    filter(), count, map(): 従来コードと Streamコードの処理速度を比較
 * @see javaGold / PracticeEditor
 *    map(): Listの各要素に String追加、削除
 * @see testExamin / TestAryEquals
 *    IntStream.range(): 配列の初期値を代入
 * @see selfLearn / Chapter02App
 *    flatMap(), boxed(), map(): 各要素にランダムで値を設定
 * @see selfLearn / Chapter04Multiple $1(下段のほう)
 *    IntStream.generate().limit(): 配列の初期値に全て同じ値を代入
 * @see selfLearn / Chapter04Multiple
 *    IntStream.rangeClosed(1, 9)を２つ作り、
 *    積をして flatMap()で結合
 *    for文を使わずに Streamで九九を表示
 * @see selfLearn / Chapter04Sum
 *    filter(), sum(): 1～100の合計が 1000を超えたら break;
 * @see selfLearn / Chapter04_Odd
 *    filter(), sum(): 100-200の奇数の合計をStreamで求める
 * @see swing / sample / DrawFont
 *    int[], String[]の定義。
 *    toArray()で配列の定義が可能。 toArray(String[]::new)も。
 * @see swing / sample / BarGraph
 *    Random.ints(begin, end).limit():
 *    ints()は非staticのため new Random().ints()で使う。
 * @see multiThread / chap10MT / swingExeCancel / ServiceSW.java
 *    同じ固定値を入れて、値１つ表示するごとに Thread.sleep(100)を実行
 *    また値１つごとに if文で条件判定。
 *    Stream.generate().limit()
 *        .peek().peek().forEach();
 * @see webPractice / resultSetMeta / MainResultSetMeta.java
 *    Stream内の例外処理は Stream外に記述してもコンパイルエラー。
 *    Stream内に try-catchすればコンパイル通るが、
 *    同様のcatch節が外側にある場合は、冗長になるだろう。
 *
 * @author shika
 * @date 2021-02-17
/*
//====== Test zeroToString() ======
answerNum:5
correctNum:3
correctRate: 60.00
correctList[〇, 〇, ×, ×, 〇]
costTime: 3.91224E+7 = 39122400 (nanoSecond)
costTime: 4E+1 = 40 (miliSecond)

//====== Test zeroToStringSTM() ======
answerNum: 5
correctNum: 3
correctRate: 60.00
correctList: [〇, 〇, ×, ×, 〇]

answerNum: 6
correctNum: 4
correctRate: 66.67
correctList: [〇, 〇, ×, ×, 〇, 〇]
costTime: 5.30811E+7 = 53081100 (nanoSecond)
costTime: 48 (miliSecond)

//====== ICalcCorrect / 2021-02-10 ======
従来型メソッドの処理時間
    costTime: 3.91224E+7 = 39122400 (nanoSecond)
    costTime: 4E+1 = 40 (miliSecond)

Strem型メソッドの処理時間
    costTime: 5.30811E+7 = 53081100 (nanoSecond)
    costTime: 48 (miliSecond)

Stream型のが遅いやん。対数メモリなので差がよくわからず。
浮動小数点数シミュレーター(URL上記)をお借りして、10進数化。
やっぱり Stream少し遅い。
 */
//====== selfLearn.Chapter04Multiple / 2021-02-17 =======
for文を使わずに、Streamで九九を表示する試み -> 失敗 Give up -> 成功！

＊ラムダ内でローカル変数を参照すると、finalしか無理と言われるので、
  必要な外生変数を参照したい場合は、fieldにすると解決する。

＊map()の 「引数 <no type> -> { }は対応してません」というエラー、
  { }ブロック内が完成し、returnで値を返すと解決する。
    ↓
//====== selfLearn.Chapter04Multiple / 2021-03-08 =======
List<Integer> multiplyList =
    IntStream.rangeClosed(1, 9).boxed() //IntStream -> Stream<Integer>
    .flatMap(x ->                       //２つの Stream<Integer>を１つに結合
        IntStream.rangeClosed(1, 9)     // 1-9の yを IntStreamで定義
            .map(y -> x * y)            // 積 x * y の IntStreamへ格納
            .boxed())                   // yの IntStream -> Stream<Integer>
    .collect(Collectors.toList());      //flatMap()で結合された Stream<Interger>を
                                        //List<Integer>に変換して代入 or そのまま forEach()も可。
 1  2  3  4  5  6  7  8  9
 2  4  6  8 10 12 14 16 18
 3  6  9 12 15 18 21 24 27
 4  8 12 16 20 24 28 32 36
 5 10 15 20 25 30 35 40 45
 6 12 18 24 30 36 42 48 54
 7 14 21 28 35 42 49 56 63
 8 16 24 32 40 48 56 64 72
 9 18 27 36 45 54 63 72 81
*/
/*
//###### multiThread / chap10MT / swingExeCancel / ServiceSW.java ######
Stream.generate(() -> ".").limit(MAX)
    .peek(s -> {
        if(isCancel()) {
            th.interrupt();
        }
    })
    .peek(s -> {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    })
    .forEach(System.out::print);
【結果】
Service..................................................done/
【考察】
この Stream処理は ちゃんと実行されるが Runnable.run()内に入れると
    Servicedone/
という結果になる。interrupt()されていないことは確認済。
Stream処理そのものがスキップされている感じ。
*/
/*
//###### webPractice / resultSetMeta / MainResultSetMeta.java ######
//2021-04-16
//---- build columnList ----
for(int i = 1; i < columnNum; i++) {
    columnList.add(rsMeta.getColumnName(i));
}//for

と同様の処理を Streamで試みるが
IntStream.range(1, columnNum)
    .mapToObj(i -> rsMeta.getColumnName(i))
    .forEach(columnList::add);

【考察】
rsMeta.getColumnName()は thows SQLException
Streamの外側に 同例外のcatch節があるが、Stream内にないとダメらしい。
mapToObj()内に try-catchすればコンパイル通るが
for文より長くなっては Streamを利用する意味がなくなるので不採用。
*/